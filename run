#!/usr/bin/env bash

set -o errexit
set -o pipefail

DC="${DC:-exec}"

# If we're running in CI we need to disable TTY allocation for docker compose
# commands that enable it by default, such as exec and run.
TTY=""
if [[ ! -t 1 ]]; then
  TTY="-T"
fi

# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------

function cov:test {
  # Run pytest
  coverage run -m pytest "${@}"
}

function cov:test-slow {
  # Run pytest & show 10 slowest tests
  coverage run -m pytest "${@}" --durations 10
}

function cov:report {
  # Generate coverage report to terminal
  coverage report "${@}"
}

function cov:html {
  # Output coverage report to ./htmlcov
  coverage html "${@}"
}

function nox:cov {
  # Check code for formatting violations
  nox -s coverage-3.13 "${@}"
}

function nox:docs {
  # Create Sphinx documentation in ./docs/_build directory
  nox -s docs-3.13 "${@}"
}

function nox:lint {
  # Run a number of flake8 linting tests
  nox -s lint-3.13 "${@}"
}

function nox:pyright {
  # Run pyright typing checks
  # cmd nox -s pyright-3.13 "${@}"
  nox -s pyright-3.13 "${@}"
}

function nox:test {
  # Run several pytest and coverage checks
  # cmd nox -s tests-3.13 "${@}"
  nox -s tests-3.13 "${@}"
}

function nox:tests {
  # Run tests for all currently supported Python versions
  nox -s tests-3.10 tests-3.11 tests-3.12 tests-3.13 "${@}"
}

function nox:re-tests {
  # Run tests for all currently supported Python versions
  nox -rs tests-3.10 tests-3.11 tests-3.12 tests-3.13 "${@}"
}

function nox:current {
  # Run code quality tests only for latest supported Python version
  nox -s lint-3.13 coverage-3.13 safety-3.13 tests-3.13 "${@}"
}

function nox:re-current {
  # Run tests only for latest supported Python version
  # DO NOT REBUILD VENVS
  nox -s lint-3.13 coverage-3.13 safety-3.13 tests-3.13 "${@}"
}

function nox:all {
  # Perform all nox code quality tests together
  nox
}

function nox:re-all {
  # Perform all nox code quality tests together
  # DO NOT REBUILD VENVS
  nox -rs
}
function poe:old {
  # List any installed packages that are outdated
  poetry show -ol
}

function poe:up {
  # Update any outdated packages
  poetry update
}

function reqs:dev {
  # Export all package requirements
  poetry export --with=dev --output requirements-dev.txt
}

function reqs:prod {
  # Export production package requirements
  poetry export --output requirements.txt
}

function reqs:all {
  # Export production package requirements
  poetry export --output requirements.txt
  poetry export --with=dev --output requirements-dev.txt
}

function ruff:check {
  # check for linting errors. Do not fix.
  ruff check .
}

function ruff:fix {
  # check for linting errors and apply fixes.
  ruff check --fix .
}

function help {
  printf "%s <task> [args]\n\nTasks:\n" "${0}"

  compgen -A function | grep -v "^_" | cat -n

  printf "\nExtended help:\n  Each task has comments for general usage\n"
}

# This idea is heavily inspired by: https://github.com/adriancooney/Taskfile
TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"
